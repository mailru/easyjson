name: easyjson

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  test:
    runs-on: ubuntu-latest
    name: Test with Go ${{ matrix.go }}
    strategy:
      fail-fast: false
      matrix:
        go: [ 1.17, 1.16, 1.15 ]
    steps:
      - uses: actions/checkout@v2

      - name: Set up Go ${{ matrix.go }}
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go }}

      - name: Install golint (for old go version)
        if: matrix.go < 1.16
        run: go get golang.org/x/lint/golint && go mod tidy

      - name: Install golint
        if: matrix.go > 1.15
        run: go install golang.org/x/lint/golint@latest

      - name: Build and Run tests
        run: make

  test-non-amd64:
    runs-on: ubuntu-latest
    name: Test on ${{ matrix.distro }} ${{ matrix.arch }}
    strategy:
      matrix:
        include:
          - arch: ppc64le
            distro: ubuntu20.04
    steps:
      - uses: actions/checkout@v2
      - uses: uraimo/run-on-arch-action@master
        with:
          arch: ${{ matrix.arch }}
          distro: ${{ matrix.distro }}
          install: |
            apt-get update
            apt install -y curl wget make gcc
            latestGo=$(curl "https://golang.org/VERSION?m=text")
            wget --quiet "https://dl.google.com/go/${latestGo}.linux-${{ matrix.arch }}.tar.gz"
            rm -f $(which go)
            rm -rf /usr/local/go
            tar -C /usr/local -xzf "${latestGo}.linux-${{ matrix.arch }}.tar.gz"
          run: |
            export PATH=/usr/local/go/bin:$PATH
            export PATH=~/go/bin:$PATH
            printf "Go Version: $(go version)\n"
            go install golang.org/x/lint/golint@latest
            make